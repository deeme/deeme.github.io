[{"categories":["调试"],"content":"安装插件 前置需要安装NvChad ","date":"2023-04-05","objectID":"/posts/technology/nvim_debug_mixed_cpp_python/:1:0","tags":null,"title":"nvim下混合编译调试Dreamplace源码","uri":"/posts/technology/nvim_debug_mixed_cpp_python/"},{"categories":["调试"],"content":"引入插件 { lazy = false, \"rcarriga/nvim-dap-ui\", dependencies = { { \"mfussenegger/nvim-dap\", config = function() return require(\"custom.configs.dap.init\")  Annotations specify that at most 0 return value(s) are required, found 1 to 2 returned here instead. end, }, }, }, ","date":"2023-04-05","objectID":"/posts/technology/nvim_debug_mixed_cpp_python/:1:1","tags":null,"title":"nvim下混合编译调试Dreamplace源码","uri":"/posts/technology/nvim_debug_mixed_cpp_python/"},{"categories":["调试"],"content":"配置插件 C++调试配置 -- c++配置 -- file:dap/cppdbg.lua local dap = require(\"dap\") local function isempty(s) return s == nil or s == \"\" end dap.adapters.cppdbg = { id = 'cppdbg', type = 'executable', command = '~/.local/share/nvim/mason/bin/OpenDebugAD7', } dap.configurations.cpp = { { name = \"Launch file\", type = \"cppdbg\", request = \"launch\", program = function() return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/', 'file') end, cwd = '${workspaceFolder}', stopAtEntry = true, }, { name = 'Attach to gdbserver :1234', type = 'cppdbg', request = 'launch', MIMode = 'gdb', miDebuggerServerAddress = 'localhost:1234', miDebuggerPath = '/usr/bin/gdb', cwd = '${workspaceFolder}', args = function() return {vim.fn.input('Parameters to executable: ', vim.fn.getcwd() .. '/', 'file')} end, program = function() return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/', 'file') end, }, } 调试初始化 -- c++配置 -- file:dap/init.lua local dap, dapui = require(\"dap\"), require(\"dapui\") dapui.setup() dap.listeners.after.event_initialized[\"dapui_config\"] = function() dapui.open() end dap.listeners.before.event_terminated[\"dapui_config\"] = function() dapui.close() end dap.listeners.before.event_exited[\"dapui_config\"] = function() dapui.close() end require(\"custom.configs.dap.cppdbg\") 调试快捷键配置 M.Debug = { n = { [\"\u003cF5\u003e\"] = { ':lua require(\"dap\").continue()\u003cCR\u003e', \"debug: run/continue\" }, [\"\u003cF7\u003e\"] = { ':lua require(\"dap\").toggle_breakpoint()\u003cCR\u003e', \"debug: toggle breakpoint\" }, [\"\u003cF8\u003e\"] = { ':lua require(\"dap\").terminate() require(\"dapui\").close()\u003cCR\u003e', \"debug: stop\" }, [\"\u003cF9\u003e\"] = { ':lua require(\"dap\").step_into()\u003cCR\u003e', \"debug: step into\" }, [\"\u003cF10\u003e\"] = { ':lua require(\"dap\").step_out()\u003cCR\u003e', \"debug: step out\" }, [\"\u003cF11\u003e\"] = { ':lua require(\"dap\").step_over()\u003cCR\u003e', \"debug: step out\" }, [\"\u003cleader\u003edb\"]= { ':lua require(\"dap\").set_breakpoint(vim.fn.input(\"Breakpoint condition: \"))\u003cCR\u003e', \"debug: Set breakpoint with condition\" }, [\"\u003cleader\u003edc\"]= { ':lua require(\"dap\").run_to_cursor()\u003cCR\u003e', \"debug: run to cursor\" }, [\"\u003cleader\u003edl\"]= { ':lua require(\"dap\").run_last()\u003cCR\u003e', \"debug: run last\" }, [\"\u003cleader\u003edo\"]= { ':lua require(\"dap\").repl.open()\u003cCR\u003e', \"debug: open REPL\" }, }, } ","date":"2023-04-05","objectID":"/posts/technology/nvim_debug_mixed_cpp_python/:1:2","tags":null,"title":"nvim下混合编译调试Dreamplace源码","uri":"/posts/technology/nvim_debug_mixed_cpp_python/"},{"categories":["调试"],"content":"调试源码 ","date":"2023-04-05","objectID":"/posts/technology/nvim_debug_mixed_cpp_python/:2:0","tags":null,"title":"nvim下混合编译调试Dreamplace源码","uri":"/posts/technology/nvim_debug_mixed_cpp_python/"},{"categories":["调试"],"content":"启动GDBServer gdbserver localhost:1234 ~/anaconda3/bin/python unittest/ops/lpabs_wirelength_unittest.py ","date":"2023-04-05","objectID":"/posts/technology/nvim_debug_mixed_cpp_python/:2:1","tags":null,"title":"nvim下混合编译调试Dreamplace源码","uri":"/posts/technology/nvim_debug_mixed_cpp_python/"},{"categories":["调试"],"content":"Neovim连接GDBServer 按F5进入调试运行模式，选2回车 输入运行参数回车 输入对应的python路径回车 ","date":"2023-04-05","objectID":"/posts/technology/nvim_debug_mixed_cpp_python/:2:2","tags":null,"title":"nvim下混合编译调试Dreamplace源码","uri":"/posts/technology/nvim_debug_mixed_cpp_python/"},{"categories":["调试"],"content":"调试界面 显示如下则成功进入调试模式： ","date":"2023-04-05","objectID":"/posts/technology/nvim_debug_mixed_cpp_python/:2:3","tags":null,"title":"nvim下混合编译调试Dreamplace源码","uri":"/posts/technology/nvim_debug_mixed_cpp_python/"},{"categories":null,"content":"Step1 （安装GNOME桌面） sudo apt-get update sudo apt-get install gnome-session-flashback sudo apt-get install ubuntu-desktop gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal -y ","date":"2023-03-28","objectID":"/posts/technology/vnc_server/:0:1","tags":null,"title":"Ubuntu安装VNCServer","uri":"/posts/technology/vnc_server/"},{"categories":null,"content":"Step2 sudo apt-get -y install xfonts-100dpi xfonts-100dpi-transcoded xfonts-75dpi xfonts-75dpi-transcoded xfonts-base ","date":"2023-03-28","objectID":"/posts/technology/vnc_server/:0:2","tags":null,"title":"Ubuntu安装VNCServer","uri":"/posts/technology/vnc_server/"},{"categories":null,"content":"Step3 sudo apt install tigervnc-standalone-server ","date":"2023-03-28","objectID":"/posts/technology/vnc_server/:0:3","tags":null,"title":"Ubuntu安装VNCServer","uri":"/posts/technology/vnc_server/"},{"categories":null,"content":"Step4：配置密码 vncpasswd ","date":"2023-03-28","objectID":"/posts/technology/vnc_server/:0:4","tags":null,"title":"Ubuntu安装VNCServer","uri":"/posts/technology/vnc_server/"},{"categories":null,"content":"Step5：配置XStartup vim ~/.vnc/xstartup 内容如下： #!/bin/sh # Start Gnome 3 Desktop [ -x /etc/vnc/xstartup ] \u0026\u0026 exec /etc/vnc/xstartup [ -r $HOME/.Xresources ] \u0026\u0026 xrdb $HOME/.Xresources vncconfig -iconic \u0026 dbus-launch --exit-with-session gnome-session \u0026 ","date":"2023-03-28","objectID":"/posts/technology/vnc_server/:0:5","tags":null,"title":"Ubuntu安装VNCServer","uri":"/posts/technology/vnc_server/"},{"categories":null,"content":"Step6:重启TigerVNC tightvncserver -kill :1 vncserver -depth 24 -name mydesktop -localhost no :1 ","date":"2023-03-28","objectID":"/posts/technology/vnc_server/:0:6","tags":null,"title":"Ubuntu安装VNCServer","uri":"/posts/technology/vnc_server/"},{"categories":["建站"],"content":" 快速开始 现在已经把整套流程打通了，直接参考下面的步骤，可以实现Obsidian写博客+自动发布和部署。 下载(Obsidian)并安装 下载安装Git-Bash 配置Git - 生成 SSH 公钥 (git-scm.com) 创建github新项目为：你的用户名.github.io，如deeme.github.io，其中deeme为我的用户名 (可选) - 添加Github项目环境变量WEB_SITE为你自己的域名如```www.deembear.top 利用obsidian打开blog文件夹，开始写博客 快捷键 Crtl + U快速发布文章（利用Obsidian Shell Command插件实现快速发布） 打开你的网址，如deeme.github.io 其他玩法 ","date":"2022-12-09","objectID":"/posts/technology/auto_deploy_with_obsidian/:0:0","tags":["博客搭建","自动部署","hugo"],"title":"Obsidian写hugo博客，github自动部署","uri":"/posts/technology/auto_deploy_with_obsidian/"},{"categories":["建站"],"content":"评论功能（可选） **建议新手根据自己的时间来衡量是否加入，不然折腾起来也挺费劲，容易遇到这种问题。确实有时间的可以尝试 本教程中使用的hugo主题是Loveit，同时加入了评论功能，使用的是Waline评论系统，比较推荐使用这个评论系统，支持自建后端也可以使用免费的后端云服务，有评论管理功能，安全，支持登录和匿名模式。 对于Waline的详细使用请看官方教程，根据官方教程配置好Waline后端好，在config.yml里面如下： waline: serverUrl: \"WALINE_SERVER_URL\" 把WALINE_SERVER_URL替换成你的Waline服务地址就可以。 ","date":"2022-12-09","objectID":"/posts/technology/auto_deploy_with_obsidian/:1:0","tags":["博客搭建","自动部署","hugo"],"title":"Obsidian写hugo博客，github自动部署","uri":"/posts/technology/auto_deploy_with_obsidian/"},{"categories":["建站"],"content":"站点统计 针对原版的不算子的统计功能，感觉有点鸡肋，可以尝试加入了其他的站点统计功能 umami（开源比较推荐） 百度统计——一站式智能数据分析与应用平台 (baidu.com) ","date":"2022-12-09","objectID":"/posts/technology/auto_deploy_with_obsidian/:2:0","tags":["博客搭建","自动部署","hugo"],"title":"Obsidian写hugo博客，github自动部署","uri":"/posts/technology/auto_deploy_with_obsidian/"},{"categories":["建站"],"content":"自有主机，docker安装Umami网站统计和Waline评论系统 1.创建文件夹 mkdir website \u0026\u0026 cd website 创建如下文件运行docker-compose up -d version: \"3\" services: db: image: mysql restart: always environment: - MYSQL_ROOT_PASSWORD=PASSWORD - MYSQL_PASSWORD=PASSWORD - MYSQL_DATABASE=umami - MYSQL_USER=user command: --default-authentication-plugin=mysql_native_password --transaction-isolation=READ-COMMITTED --binlog-format=ROW #解决外部无法访问 volumes: - ./conf:/etc/mysql/conf.d - ./data:/var/lib/mysql network_mode: \"host\" unami: image: ghcr.io/umami-software/umami:mysql-latest network_mode: \"host\" environment: DATABASE_URL: mysql://user:PASSWORD@localhost:3306/umami DATABASE_TYPE: mysql HASH_SALT: replace-me-with-a-random-string restart: always waline: container_name: waline image: lizheming/waline:latest restart: always network_mode: \"host\" volumes: - ${PWD}/data:/app/data environment: TZ: 'Asia/Shanghai' MYSQL_HOST: localhost MYSQL_DB: waline MYSQL_USER: user MYSQL_PASSWORD: PASSWORD SITE_NAME: \"SivanLaai's Blog\" SITE_URL: 'http://www.laais.cn' SECURE_DOMAINS: 'www.laais.cn' AUTHOR_EMAIL: 'eamil@163.com' SMTP_PASS: SMTP_PASSWORD SMTP_USER: qqid@qq.com SMTP_SERVICE: QQ 3 初始化waline数据库 /*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */; /*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */; /*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */; /*!40101 SET NAMES utf8 */; SET NAMES utf8mb4; /*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */; /*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */; /*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */; # Dump of table wl_Comment # ------------------------------------------------------------ CREATE TABLE `wl_Comment` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `user_id` int(11) DEFAULT NULL, `comment` text, `insertedAt` timestamp NULL DEFAULT CURRENT_TIMESTAMP, `ip` varchar(100) DEFAULT '', `link` varchar(255) DEFAULT NULL, `mail` varchar(255) DEFAULT NULL, `nick` varchar(255) DEFAULT NULL, `pid` int(11) DEFAULT NULL, `rid` int(11) DEFAULT NULL, `sticky` boolean DEFAULT NULL, `status` varchar(50) NOT NULL DEFAULT '', `like` int(11) DEFAULT NULL, `ua` text, `url` varchar(255) DEFAULT NULL, `createdAt` timestamp NULL DEFAULT CURRENT_TIMESTAMP, `updatedAt` timestamp NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; # Dump of table wl_Counter # ------------------------------------------------------------ CREATE TABLE `wl_Counter` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `time` int(11) DEFAULT NULL, `reaction0` int(11) DEFAULT NULL, `reaction1` int(11) DEFAULT NULL, `reaction2` int(11) DEFAULT NULL, `reaction3` int(11) DEFAULT NULL, `reaction4` int(11) DEFAULT NULL, `reaction5` int(11) DEFAULT NULL, `reaction6` int(11) DEFAULT NULL, `reaction7` int(11) DEFAULT NULL, `reaction8` int(11) DEFAULT NULL, `url` varchar(255) NOT NULL DEFAULT '', `createdAt` timestamp NULL DEFAULT CURRENT_TIMESTAMP, `updatedAt` timestamp NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; # Dump of table wl_Users # ------------------------------------------------------------ CREATE TABLE `wl_Users` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `display_name` varchar(255) NOT NULL DEFAULT '', `email` varchar(255) NOT NULL DEFAULT '', `password` varchar(255) NOT NULL DEFAULT '', `type` varchar(50) NOT NULL DEFAULT '', `label` varchar(255) DEFAULT NULL, `url` varchar(255) DEFAULT NULL, `avatar` varchar(255) DEFAULT NULL, `github` varchar(255) DEFAULT NULL, `twitter` varchar(255) DEFAULT NULL, `facebook` varchar(255) DEFAULT NULL, `google` varchar(255) DEFAULT NULL, `weibo` varchar(255) DEFAULT NULL, `qq` varchar(255) DEFAULT NULL, `2fa` varchar(32) DEFAULT NULL, `createdAt` timestamp NULL DEFAULT CURRENT_TIMESTAMP, `updatedAt` timestamp NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; /*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */; /*!401","date":"2022-12-09","objectID":"/posts/technology/auto_deploy_with_obsidian/:2:1","tags":["博客搭建","自动部署","hugo"],"title":"Obsidian写hugo博客，github自动部署","uri":"/posts/technology/auto_deploy_with_obsidian/"},{"categories":["教程"],"content":"nextcloud网盘相关问题 ","date":"2022-07-28","objectID":"/posts/technology/nextcloud/:1:0","tags":["nextcloud","apache","aria2"],"title":"nextcloud配置","uri":"/posts/technology/nextcloud/"},{"categories":["教程"],"content":"网盘配置 （1）配置环境 Linux + Apache2 + Mysql + Php(LAMP) Example installation on Ubuntu 20.04 LTS — Nextcloud latest Administration Manual latest documentation 配置Linux + Nginx + Mysql + Php(LNMP)环境 sudo apt update \u0026\u0026 sudo apt upgrade sudo apt install mariadb-server nginx php-gd php-mysql php-fpm \\ php-curl php-mbstring php-intl php-gmp php-bcmath php-xml php-imagick php-zip （2）安装nextcloud Installation on Linux — Nextcloud latest Administration Manual latest documentation （3）Nginx配置解析php Nginx配置上传大小 # /etc/nginx/nginx.conf http { client_max_body_size 20480M; client_body_buffer_size 10M; } 修改配置 # /etc/nginx/conf.d/nextcloud.conf ## # You should look at the following URL's in order to grasp a solid understanding # of Nginx configuration files in order to fully unleash the power of Nginx. # https://www.nginx.com/resources/wiki/start/ # https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/ # https://wiki.debian.org/Nginx/DirectoryStructure # # In most cases, administrators will remove this file from sites-enabled/ and # leave it as reference inside of sites-available where it will continue to be # updated by the nginx packaging team. # # This file will automatically load configuration files provided by other # applications, such as Drupal or Wordpress. These applications will be made # available underneath a path with that package name, such as /drupal8. # # Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples. ## # Default server configuration # upstream php-handler { #server 127.0.0.1:9000; server unix:/run/php/php8.1-fpm.sock; } server { listen 80; listen [::]:80; server_name nextcloud.laais.cn; # Path to the root of your installation root /var/www/nextcloud; # Enable gzip but do not remove ETag headers gzip on; gzip_vary on; gzip_comp_level 4; gzip_min_length 256; gzip_proxied expired no-cache no-store private no_last_modified no_etag auth; gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/wasm application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy; # Pagespeed is not supported by Nextcloud, so if your server is built # with the `ngx_pagespeed` module, uncomment this line to disable it. #pagespeed off; # HTTP response headers borrowed from Nextcloud `.htaccess` add_header Referrer-Policy \"no-referrer\" always; add_header X-Content-Type-Options \"nosniff\" always; add_header X-Download-Options \"noopen\" always; add_header X-Frame-Options \"SAMEORIGIN\" always; add_header X-Permitted-Cross-Domain-Policies \"none\" always; add_header X-Robots-Tag \"none\" always; add_header X-XSS-Protection \"1; mode=block\" always; # Remove X-Powered-By, which is an information leak fastcgi_hide_header X-Powered-By; # Specify how to handle directories -- specifying `/index.php$request_uri` # here as the fallback means that Nginx always exhibits the desired behaviour # when a client requests a path that corresponds to a directory that exists # on the server. In particular, if that directory contains an index.php file, # that file is correctly served; if it doesn't, then the request is passed to # the front-end controller. This consistent behaviour means that we don't need # to specify custom rules for certain paths (e.g. images and other assets, # `/updater`, `/ocm-provider`, `/ocs-provider`), and thus # `try_files $uri $uri/ /index.php$request_uri` # always provides the desired behaviour. index index.php index.html /index.php$request_uri; # Rule borrowed from `.htaccess` to handle Microsoft DAV clients location = / { if ( $http_user_agent ~ ^DavClnt ) { return 302 /remote.php/webdav/$is_args$args; } } location = /robots.txt { allow all; log_not_found o","date":"2022-07-28","objectID":"/posts/technology/nextcloud/:1:1","tags":["nextcloud","apache","aria2"],"title":"nextcloud配置","uri":"/posts/technology/nextcloud/"},{"categories":["教程"],"content":"请更改权限为 0770 以避免其他用户查看目录 config.php . 'check_data_directory_permissions' =\u003e false, ... ","date":"2022-07-28","objectID":"/posts/technology/nextcloud/:1:2","tags":["nextcloud","apache","aria2"],"title":"nextcloud配置","uri":"/posts/technology/nextcloud/"},{"categories":["教程"],"content":"安装配置启动aria2 安装aria2 sudo apt install aria2 cd /etc/ \u0026\u0026 mkdir aria2 \u0026\u0026 cd aria2 \u0026\u0026 touch aria2c.conf \u0026\u0026 touch aria2.session 创建配置文件 #aria2c.conf ## 文件保存相关 ## # 文件保存目录 dir=/var/www/nextcloud/data/nextcloud/files/Video # 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16M disk-cache=32M # 断点续传 continue=true # 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc # 预分配所需时间: none \u003c falloc ? trunc \u003c prealloc # falloc和trunc则需要文件系统和内核支持 # NTFS建议使用falloc, EXT3/4建议trunc, MAC 下需要注释此项 file-allocation=trunc ## 下载连接相关 ## # 最大同时下载任务数, 运行时可修改, 默认:5 #max-concurrent-downloads=10 # 同一服务器连接数, 添加时可指定, 默认:1 # 官方的aria2最高设置为16, 如果需要设置任意数值请重新编译aria2 max-connection-per-server=16 # 整体下载速度限制, 运行时可修改, 默认:0（不限制） #max-overall-download-limit=0 # 单个任务下载速度限制, 默认:0（不限制） #max-download-limit=0 # 整体上传速度限制, 运行时可修改, 默认:0（不限制） #max-overall-upload-limit=0 # 单个任务上传速度限制, 默认:0（不限制） #max-upload-limit=0 # 禁用IPv6, 默认:false # disable-ipv6=true # 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M # 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载 min-split-size=10M # 单个任务最大线程数, 添加时可指定, 默认:5 # 建议同max-connection-per-server设置为相同值 split=16 ## 进度保存相关 ## # 从会话文件中读取下载任务 input-file=/etc/aria2/aria2.session # 在Aria2退出时保存错误的、未完成的下载任务到会话文件 save-session=/etc/aria2/aria2.session # 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0 save-session-interval=60 ## RPC相关设置 ## # 启用RPC, 默认:false enable-rpc=true # 允许所有来源, 默认:false rpc-allow-origin-all=true # 允许外部访问, 默认:false rpc-listen-all=true # RPC端口, 仅当默认端口被占用时修改 # rpc-listen-port=6800 # 设置的RPC授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项 rpc-secret=passwd #在访问的时候要使用到的密码 # 启动SSL #rpc-secure=true # 证书文件, 如果启用SSL则需要配置证书文件, 例如用https连接aria2 #rpc-certificate=/var/snap/nextcloud/current/certs/live/fullchain.pem #rpc-private-key=/var/snap/nextcloud/current/certs/live/privkey.pem ## BT/PT下载相关 ## # 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:true follow-torrent=true # 客户端伪装, PT需要 peer-id-prefix=-TR2770- user-agent=Transmission/2.77 # 强制保存会话, 即使任务已经完成, 默认:false # 较新的版本开启后会在任务完成后依然保留.aria2文件 #force-save=false # 继续之前的BT任务时, 无需再次校验, 默认:false bt-seed-unverified=true # 保存磁力链接元数据为种子文件(.torrent文件), 默认:false # bt-save-metadata=true # 单个种子最大连接数, 默认:55 0表示不限制 bt-max-peers=0 # 最小做种时间, 单位:分 seed-time = 1 # 分离做种任务 bt-detach-seed-only=true on-download-complete=/home/filesscan.sh 启动aria2 nohup aria2c --conf-path=/etc/aria2/aria2.conf \u003e /home/linux/aria2.log 2\u003e\u00261 \u0026 配置aria2 自动更新bt tracker # startaria.sh while(true) do sudo kill -9 $(ps -ef|grep aria2|gawk '$0 !~/grep/ {print $2}' |tr -s '\\n' ' ') list=`wget -qO- https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_best.txt|awk NF|sed \":a;N;s/\\n/,/g;ta\"` echo $list if [ -z \"`grep \"bt-tracker\" /etc/aria2/aria2.conf`\" ]; then sudo sed -i '$a bt-tracker='${list} /etc/aria2/aria2.conf echo add...... else sudo sed -i \"s@bt-tracker.*@bt-tracker=$list@g\" /etc/aria2/aria2.conf echo update...... fi sudo aria2c --conf-path=/etc/aria2/aria2.conf sleep 24h #sleep 10 done 配置nextcloud启动脚本 # startserver.sh sudo service apache2 stop sudo service apache2 start sudo /etc/init.d/mysql start # 运行aria2脚本更新bt trackers sudo nohup bash startaria.sh \u003e /home/linux/log/aria2.log 2\u003e\u00261 \u0026 # 监控文件变化 while(true) do sudo -u www-data php /var/www/nextcloud/occ files:scan --all sleep 60 done # runserver.sh # 删除aria相关的程序 sudo kill -9 $(ps -ef|grep startserver|gawk '$0 !~/grep/ {print $2}' |tr -s '\\n' ' ') sudo kill -9 $(ps -ef|grep startaria|gawk '$0 !~/grep/ {print $2}' |tr -s '\\n' ' ') sudo kill -9 $(ps -ef|grep aria2|gawk '$0 !~/grep/ {print $2}' |tr -s '\\n' ' ') sudo nohup bash startserver.sh \u003e /home/linux/log/nextcloud.log 2\u003e\u00261 \u0026 配置aria2NG # 下载aria2ng cd /var/www/ wget https://github.com/mayswind/AriaNg/releases/download/1.2.3/AriaNg-1.2.3.zip mkdir ariang unzip AriaNg-1.2.3.zip 配置apache2网页 # 创建/etc/apache2/sites-available/ariang.conf Alias /ariang \"/var/www/ariang/\" \u003cDirectory /var/www/ariang/\"\u003e Require all granted AllowOverride All Options FollowSymLinks MultiViews \u003cIfModule mod_dav.c\u003e Dav off \u003c/IfModule\u003e \u003c/Directory\u003e # 访问http://host.example.com/ariang ","date":"2022-07-28","objectID":"/posts/technology/nextcloud/:1:3","tags":["nextcloud","apache","aria2"],"title":"nextcloud配置","uri":"/posts/technology/nextcloud/"},{"categories":["教程"],"content":"Nextcloud镜像安装 创建文件夹nextcloud mkdir nextcloud 创建文件docker-compose.yml --- version: '2' volumes: nextcloud: db: services: db: image: mariadb restart: always command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW volumes: - db:/var/lib/mysql environment: - MYSQL_ROOT_PASSWORD=root - MYSQL_PASSWORD=passwd - MYSQL_DATABASE=nextcloud - MYSQL_USER=nextcloud app: image: nextcloud restart: always ports: - 8080:80 links: - db volumes: - nextcloud:/var/www/html environment: - MYSQL_PASSWORD=passwd - MYSQL_DATABASE=nextcloud - MYSQL_USER=nextcloud - MYSQL_HOST=db 启动镜像 sudo docker-compose up -d 常见问题 ","date":"2022-07-28","objectID":"/posts/technology/nextcloud/:1:4","tags":["nextcloud","apache","aria2"],"title":"nextcloud配置","uri":"/posts/technology/nextcloud/"},{"categories":["教程"],"content":"apache2解析失败php 重新安装php sudo apt-get purge php8.* sudo apt install php ","date":"2022-07-28","objectID":"/posts/technology/nextcloud/:1:5","tags":["nextcloud","apache","aria2"],"title":"nextcloud配置","uri":"/posts/technology/nextcloud/"},{"categories":["教程"],"content":"apache2提示找不到apache.conf 重新安装apache2 sudo dpkg -P apache2 apt-get remove apache2 apt-get install apache2 ","date":"2022-07-28","objectID":"/posts/technology/nextcloud/:1:6","tags":["nextcloud","apache","aria2"],"title":"nextcloud配置","uri":"/posts/technology/nextcloud/"},{"categories":["问题总结"],"content":"wordpress permainlink 不生效 1.打开apache2默认配置文件 sudo vim /etc/apache2/sites-available/000-default.conf 2.修改内容为如下 LoadModule proxy_module modules/mod_proxy.so LoadModule proxy_http_module modules/mod_proxy_http.so \u003cVirtualHost *:80\u003e # The ServerName directive sets the request scheme, hostname and port that # the server uses to identify itself. This is used when creating # redirection URLs. In the context of virtual hosts, the ServerName # specifies what hostname must appear in the request's Host: header to # match this virtual host. For the default virtual host (this file) this # value is not decisive as it is used as a last resort host regardless. # However, you must set it for any further virtual host explicitly. #ServerName www.example.com ServerAdmin webmaster@localhost DocumentRoot /var/www/html \u003cDirectory /var/www/html\u003e AllowOverride All Require all granted \u003c/Directory\u003e # Available loglevels: trace8, ..., trace1, debug, info, notice, warn, # error, crit, alert, emerg. # It is also possible to configure the loglevel for particular # modules, e.g. #LogLevel info ssl:warn ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined # For most configuration files from conf-available/, which are # enabled or disabled at a global level, it is possible to # include a line for only one particular virtual host. For example the # following line enables the CGI configuration for this host only # after it has been globally disabled with \"a2disconf\". #Include conf-available/serve-cgi-bin.conf \u003c/VirtualHost\u003e 3.在/wp-admin/options-permalink.php页面选择-\u003ePermalink structure -\u003e Post name保存生成.hatcess ","date":"2022-05-19","objectID":"/posts/technology/wordpress/:1:0","tags":["wordpress"],"title":"wordpress安装和问题","uri":"/posts/technology/wordpress/"},{"categories":["教程"],"content":"软件编译和安装 ","date":"2022-05-19","objectID":"/posts/technology/compile_and_install/:0:0","tags":["软件编译","软件安装"],"title":"软件编译和安装","uri":"/posts/technology/compile_and_install/"},{"categories":["教程"],"content":"qbittorrent编译安装 安装依赖 apt-get install build-essential pkg-config automake libtool git apt-get install libboost-dev libboost-system-dev libboost-chrono-dev libboost-random-dev libssl-dev libgeoip-dev 安装libtorrent git clone https://github.com/arvidn/libtorrent.git #之前系统版本可直接下载源码使用，18.04需修改include/libtorrent/export.hpp替换boost/config/为boost/config/detail/ #https://github.com/arvidn/libtorrent/releases/download/libtorrent-1_0_11/libtorrent-rasterbar-1.0.11.tar.gz cd libtorrent git checkout origin/RC_1_2 ./autotool.sh ./configure CXXFLAGS=-std=c++14 make clean \u0026\u0026 make -j$(nproc) make install 安装qbittorrent apt-get install qtbase5-dev qttools5-dev-tools libqt5svg5-dev zlib1g-dev wget https://github.com/qbittorrent/qBittorrent/archive/release-4.2.5 tar zxvf release-4.1.3.tar.gz cd qBittorrent-release-4.1.3/ ./configure --disable-gui make clean \u0026\u0026 make -j$(nproc) make install ","date":"2022-05-19","objectID":"/posts/technology/compile_and_install/:1:0","tags":["软件编译","软件安装"],"title":"软件编译和安装","uri":"/posts/technology/compile_and_install/"},{"categories":["教程"],"content":"LAMP php7.4安装 Ubuntu 18 安装 apt-get install software-properties-common 添加第三方源 add-apt-repository ppa:ondrej/php apt-get update 安装LAMP环境 sudo apt update sudo apt install apache2 mariadb-server libapache2-mod-php7.4 sudo apt install php7.4-gd php7.4-mysql php7.4-curl php7.4-mbstring php7.4-intl sudo apt install php7.4-gmp php7.4-bcmath php-imagick php7.4-xml php7.4-zip ","date":"2022-05-19","objectID":"/posts/technology/compile_and_install/:2:0","tags":["软件编译","软件安装"],"title":"软件编译和安装","uri":"/posts/technology/compile_and_install/"},{"categories":["教程"],"content":"LAMP php安装 Ubuntu 22 安装 apt-get install software-properties-common 添加第三方源 add-apt-repository ppa:ondrej/php apt-get update 安装LAMP环境 sudo apt update \u0026\u0026 sudo apt upgrade sudo apt install mariadb-server php-gd php-mysql php-fpm \\ php-curl php-mbstring php-intl php-gmp php-bcmath php-xml php-imagick php-zip ","date":"2022-05-19","objectID":"/posts/technology/compile_and_install/:3:0","tags":["软件编译","软件安装"],"title":"软件编译和安装","uri":"/posts/technology/compile_and_install/"},{"categories":["教程"],"content":"Neovim 安装 Ubuntu PPA安装 安装依赖软件 sudo apt-get install software-properties-common ## older ubuntu version sudo apt-get install python-software-properties 安装发布版本neovim sudo add-apt-repository ppa:neovim-ppa/stable sudo apt-get update sudo apt-get install neovim 编译安装 安装编译依赖 sudo apt-get install ninja-build gettext libtool libtool-bin autoconf automake cmake g++ pkg-config unzip curl doxygen 获取源代码 git clone https://github.com/neovim/neovim 编译安装neovim cd neovim make sudo make install 让neovim支持python和python3 sudo apt-get install python3 python3-pip python-pip -y pip install neovim pip3 install neovim ","date":"2022-05-19","objectID":"/posts/technology/compile_and_install/:4:0","tags":["软件编译","软件安装"],"title":"软件编译和安装","uri":"/posts/technology/compile_and_install/"},{"categories":["教程"],"content":"tmux 安装 Ubuntu 编译安装 获取源代码 wget https://github.com/tmux/tmux/releases/download/3.3-rc/tmux-3.3-rc.tar.gz 编译neovim tar -zxvf tmux-3.3-rc.tar.gz cd tmux-3.3-rc make sudo make install ","date":"2022-05-19","objectID":"/posts/technology/compile_and_install/:5:0","tags":["软件编译","软件安装"],"title":"软件编译和安装","uri":"/posts/technology/compile_and_install/"},{"categories":["教程"],"content":"transmission 安装 镜像安装 创建文件夹nextcloud mkdir transmission 创建文件docker-compose.yml --- version: \"2.1\" services: transmission: image: lscr.io/linuxserver/transmission container_name: transmission environment: - PUID=1000 - PGID=1000 - TZ=Europe/London - TRANSMISSION_WEB_HOME=/combustion-release/ #optional - USER=transmission #optional - PASS=passwd #optional #- WHITELIST=iplist #optional #- PEERPORT=peerport #optional #- HOST_WHITELIST=dnsnane list #optional volumes: - ./config:/config - ./downloads:/downloads - ./watch:/watch ports: - 9091:9091 - 51413:51413 - 51413:51413/udp restart: unless-stopped 启动镜像 sudo docker-compose up -d apt安装 安装 sudo apt update install transmission-daemon 修改配置文件 ... \"rpc-whitelist\": \"*\", \"rpc-whitelist-enabled\": true, ... web-ui安装 安装 wget https://github.com/ronggang/transmission-web-control/raw/master/release/install-tr-control-cn.sh bash install-tr-control-cn.sh ","date":"2022-05-19","objectID":"/posts/technology/compile_and_install/:6:0","tags":["软件编译","软件安装"],"title":"软件编译和安装","uri":"/posts/technology/compile_and_install/"},{"categories":["教程"],"content":"Selenium配置 [Webdriver驱动列表](Install browser drivers | Selenium) Windows 下载驱动 [Edge Webdriver](Microsoft Edge WebDriver - Microsoft Edge Developer) Chrome Webdriver 解压驱动到程序目录 mkdir selenium_test cd selenium_test 启动镜像 sudo docker-compose up -d ","date":"2022-05-19","objectID":"/posts/technology/compile_and_install/:7:0","tags":["软件编译","软件安装"],"title":"软件编译和安装","uri":"/posts/technology/compile_and_install/"},{"categories":["教程"],"content":"Jellyfin 安装 并启用硬件加速 apt安装 所有的Ubuntu发行版本 https://repo.jellyfin.org/releases/server/ubuntu/versions 查看当前的GPU设备 lspci -k | grep -A 2 -i \"VGA\" 禁用nouveau sudo vim /etc/modprobe.d/blacklist_nouveau.conf # 添加 blacklist nouveau options nouveau modeset=0 sudo reboot 搜索Nvidia显卡驱动 sudo ubuntu-drivers devices # 安装推荐的驱动 modalias : pci:v000010DEd00000FC2sv00001462sd0000275Cbc03sc00i00 vendor : NVIDIA Corporation model : GK107 [GeForce GT 630 OEM] driver : nvidia-driver-450-server - distro non-free #server版本的驱动 driver : nvidia-driver-470-server - distro non-free driver : nvidia-340 - distro non-free driver : nvidia-driver-418-server - distro non-free driver : nvidia-driver-470 - distro non-free recommended #gui版本的驱动 driver : nvidia-driver-390 - distro non-free driver : xserver-xorg-video-nouveau - distro free builtin 安装驱动 sudo apt install nvidia-driver-470-server #重启然后在jellyfin中设置Nvidia解码 镜像安装 创建文件夹jellyfin mkdir jellyfin 创建文件docker-compose.yml --- version: \"3.5\" services: jellyfin: image: nyanmisaka/jellyfin:latest container_name: jellyfin user: 1000:1000 network_mode: \"host\" volumes: - ./config:/config - ./cache:/cache - ./media:/media - /path/to/media2:/media2:ro restart: \"unless-stopped\" 启动镜像 sudo docker-compose up -d # 这种版本可能会导致apache2在转发端口的时候web存在不能访问服务器 ","date":"2022-05-19","objectID":"/posts/technology/compile_and_install/:8:0","tags":["软件编译","软件安装"],"title":"软件编译和安装","uri":"/posts/technology/compile_and_install/"},{"categories":["教程"],"content":"Nvidia驱动安装 Ubuntu 查看驱动 sudo dpkg --list | grep nvidia-* 卸载驱动 sudo /usr/bin/nvidia-uninstall sudo apt-get --purge remove nvidia-* sudo apt-get purge nvidia* sudo apt-get purge libnvidia* 检查驱动是否卸载 sudo dpkg --list | grep nvidia-* # 无任何输出 安装驱动 sudo ubuntu-drivers devices sudo apt install nvidia-driver-470-server ","date":"2022-05-19","objectID":"/posts/technology/compile_and_install/:9:0","tags":["软件编译","软件安装"],"title":"软件编译和安装","uri":"/posts/technology/compile_and_install/"},{"categories":["教程"],"content":"apache常见问题 ","date":"2022-05-03","objectID":"/posts/technology/apache2_and_nginx/:0:0","tags":["反向代理","网站证书"],"title":"web容器的使用和反向代理","uri":"/posts/technology/apache2_and_nginx/"},{"categories":["教程"],"content":"配置apache2文件简单服务器 打开配置文件 sudo vim /etc/apache2/sites-available/000-default.conf 修改内容为 Alias /e6ecni3_Sivan \"/var/www/html/\" \u003cDirectory /var/www/html/\"\u003e Require all granted AllowOverride All Options FollowSymLinks MultiViews \u003c/Directory\u003e 删除/var/www/html sudo rm -rf /var/www/html #软链html为你的共享文件目录 ","date":"2022-05-03","objectID":"/posts/technology/apache2_and_nginx/:0:1","tags":["反向代理","网站证书"],"title":"web容器的使用和反向代理","uri":"/posts/technology/apache2_and_nginx/"},{"categories":["教程"],"content":"访问apache2服务器默认指向index.php 删除浏览器的访问记录就可以 ","date":"2022-05-03","objectID":"/posts/technology/apache2_and_nginx/:0:2","tags":["反向代理","网站证书"],"title":"web容器的使用和反向代理","uri":"/posts/technology/apache2_and_nginx/"},{"categories":["教程"],"content":"在apache2中配置反向代理 反向代理服务器位于用户与目标服务器之间，但是对于用户而言，反向代理服务器就相当于目标服务器，即用户直接访问反向代理服务器就可以获得目标服务器的资源。同时，用户不需要知道目标服务器的地址，也无须在用户端作任何设定。反向代理服务器通常可用来作为Web加速，即使用反向代理作为Web服务器的前置机来降低网络和服务器的负载，提高访问效率。 其作用如下表示： 开启模块支持 sudo a2enmod rewrite sudo a2enmod lbmethod_byrequests sudo a2enmod proxy_balancer sudo a2enmod proxy_http sudo a2enmod proxy 添加反向代理设置 #sites-available/example.conf LoadModule proxy_module modules/mod_proxy.so LoadModule proxy_http_module modules/mod_proxy_http.so \u003cVirtualHost *:80\u003e # The ServerName directive sets the request scheme, hostname and port that # the server uses to identify itself. This is used when creating # redirection URLs. In the context of virtual hosts, the ServerName # specifies what hostname must appear in the request's Host: header to # match this virtual host. For the default virtual host (this file) this # value is not decisive as it is used as a last resort host regardless. # However, you must set it for any further virtual host explicitly. #ServerName www.example.com ServerAdmin sivan@localhost # Para qbittorrent RewriteEngine on RewriteRule ^/torrent$ \"/torrent/$1\" [R] ProxyPass /torrent/ http://127.0.0.1:8080/ ProxyPassReverse /torrent/ http://127.0.0.1:8080/ # Available loglevels: trace8, ..., trace1, debug, info, notice, warn, # error, crit, alert, emerg. # It is also possible to configure the loglevel for particular # modules, e.g. #LogLevel info ssl:warn ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined # For most configuration files from conf-available/, which are # enabled or disabled at a global level, it is possible to # include a line for only one particular virtual host. For example the # following line enables the CGI configuration for this host only # after it has been globally disabled with \"a2disconf\". #Include conf-available/serve-cgi-bin.conf \u003c/VirtualHost\u003e # vim: syntax=apache ts=4 sw=4 sts=4 sr noet 启动服务 sudo a2ensite example.conf sudo service apache2 restart ","date":"2022-05-03","objectID":"/posts/technology/apache2_and_nginx/:0:3","tags":["反向代理","网站证书"],"title":"web容器的使用和反向代理","uri":"/posts/technology/apache2_and_nginx/"},{"categories":["教程"],"content":"apache 添加ssl证书并反向代理 开启ssl模块 sudo a2enmod ssl 配置证书site.conf LoadModule proxy_module modules/mod_proxy.so \u003cIfModule mod_ssl.c\u003e \u003cVirtualHost _default_:443\u003e ServerAdmin webmaster@localhost RewriteEngine on ProxyPass / http://127.0.0.1:8360/ ProxyPassReverse / http://127.0.0.1:8360/ ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined SSLEngine on SSLCertificateFile /etc/apache2/ssl/cloud.laais.cn.pem SSLCertificateKeyFile /etc/apache2/ssl/cloud.laais.cn.key SSLCertificateChainFile /etc/apache2/ssl/cloud.laais.cn.crt SSLCACertificatePath /etc/apache2/ssl SSLCACertificateFile /etc/apache2/ssl.crt/root_bundle.crt \u003c/VirtualHost\u003e \u003c/IfModule\u003e # vim: syntax=apache ts=4 sw=4 sts=4 sr noet ","date":"2022-05-03","objectID":"/posts/technology/apache2_and_nginx/:1:0","tags":["反向代理","网站证书"],"title":"web容器的使用和反向代理","uri":"/posts/technology/apache2_and_nginx/"},{"categories":["教程"],"content":"apache 配置websocket代理 LoadModule proxy_module modules/mod_proxy.so LoadModule proxy_http_module modules/mod_proxy_http.so \u003cVirtualHost *:80\u003e ServerName www.hfsurrogacy.com ServerAdmin webmaster@hfsurrogacy.com DocumentRoot /var/www/html \u003cDirectory /var/www/html\u003e AllowOverride All Require all granted \u003c/Directory\u003e ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined \u003cLocationMatch \"/web\"\u003e ProxyPass http://127.0.0.1:10086/web upgrade=WebSocket ProxyAddHeaders Off ProxyPreserveHost On RequestHeader set Host %{HTTP_HOST}s RequestHeader set X-Forwarded-For %{REMOTE_ADDR}s \u003c/LocationMatch\u003e \u003c/VirtualHost\u003e ","date":"2022-05-03","objectID":"/posts/technology/apache2_and_nginx/:2:0","tags":["反向代理","网站证书"],"title":"web容器的使用和反向代理","uri":"/posts/technology/apache2_and_nginx/"},{"categories":["教程"],"content":"阿里云ssl证书安装错误 根据阿里云的教程在Apache服务器上安装SSL证书 (aliyun.com) 1.在服务器上更新证书apache2会报错 （1）错误1：AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globa 在apache.conf最后添加如下： ... # vim: syntax=apache ts=4 sw=4 sts=4 sr noet ServerName 127.0.0.1 （2）错误2：Action 'start' failed. 看日志提示SSL Library Error: error:0A0000B1:SSL routines::no certificate assigned 解决方案 下载这两处的文件然后把其他文件里面的pem文件更新到site.conf中 Nginx常见问题 ","date":"2022-05-03","objectID":"/posts/technology/apache2_and_nginx/:3:0","tags":["反向代理","网站证书"],"title":"web容器的使用和反向代理","uri":"/posts/technology/apache2_and_nginx/"},{"categories":["教程"],"content":"配置nginx反向代理和重定向 打开配置文件 sudo vim /etc/nginx/conf.d/jellyfin.conf 添加如下内容（访问http://host/video/.html 可反向代理重定向到http://host:8096/.html）： set $jellyfin 127.0.0.1; location /video { # Proxy main Jellyfin traffic rewrite ^/video/(.*)$ /$1 break; proxy_pass http://$jellyfin:8096; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Protocol $scheme; proxy_set_header X-Forwarded-Host $http_host; # Disable buffering when the nginx proxy gets very resource heavy upon streaming proxy_buffering off; } # location block for /web - This is purely for aesthetics so /web/#!/ works instead of having to go to /web/index.html/#!/ location = /video/web/ { # Proxy main Jellyfin traffic proxy_pass http://$jellyfin:8096/web/index.html; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Protocol $scheme; proxy_set_header X-Forwarded-Host $http_host; } ","date":"2022-05-03","objectID":"/posts/technology/apache2_and_nginx/:3:1","tags":["反向代理","网站证书"],"title":"web容器的使用和反向代理","uri":"/posts/technology/apache2_and_nginx/"},{"categories":["教程"],"content":"配置wordpress支持 打开配置文件 sudo vim /etc/nginx/sites-available/default 添加如下内容（支持.htaccess和php）： server { listen 80 default_server; listen [::]:80 default_server; # SSL configuration # # listen 443 ssl default_server; # listen [::]:443 ssl default_server; # # Note: You should disable gzip for SSL traffic. # See: https://bugs.debian.org/773332 # # Read up on ssl_ciphers to ensure a secure configuration. # See: https://bugs.debian.org/765782 # # Self signed certs generated by the ssl-cert package # Don't use them in a production server! # # include snippets/snakeoil.conf; root /var/www/html; # Add index.php to the list if you are using PHP index index.php index.html index.htm index.nginx-debian.html; server_name _; location / { # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. try_files $uri $uri/ =404; # support .htaccess if (-f $request_filename/index.html){ rewrite (.*) $1/index.html break; } if (-f $request_filename/index.php){ rewrite (.*) $1/index.php; } if (!-f $request_filename){ rewrite (.*) /index.php; } } location /login { proxy_redirect off; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; set $is_v2ray 0; if ($http_upgrade = \"websocket\") { set $is_v2ray 1; } if ($is_v2ray = 1) { # 仅当请求为 WebSocket 时才反代到 V2Ray proxy_pass http://127.0.0.1:10086; } if ($is_v2ray = 0) { # 否则显示正常网页 rewrite ^/(.*)$ /mask-page last; } } # pass PHP scripts to FastCGI server # location ~ \\.php$ { include snippets/fastcgi-php.conf; # With php-fpm (or other unix sockets): fastcgi_pass unix:/run/php/php7.4-fpm.sock; } } ","date":"2022-05-03","objectID":"/posts/technology/apache2_and_nginx/:3:2","tags":["反向代理","网站证书"],"title":"web容器的使用和反向代理","uri":"/posts/technology/apache2_and_nginx/"},{"categories":["项目"],"content":"添加功能： ","date":"2022-04-08","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/:1:0","tags":["vim","tmux"],"title":"Vim/Neovim-Tmux 一键安装轻量级工作站","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"categories":["项目"],"content":"1.文件管理：插件NerdTree 打开文件管理：Crtl + N 退出文件管理：Crtl + C ","date":"2022-04-08","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/:1:1","tags":["vim","tmux"],"title":"Vim/Neovim-Tmux 一键安装轻量级工作站","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"categories":["项目"],"content":"2.跳转功能：Ctags\\pygments\\gtags 跳转到定义：Crtl + ] 后退：Crtl + T Ctrl+\\ c Find functions calling this function Ctrl+\\ d Find functions called by this function Ctrl+\\ e Find this egrep pattern Ctrl+\\ f Find this file Ctrl+\\ g Find this definition Ctrl+\\ i Find files #including this file Ctrl+\\ s Find this C symbol Ctrl+\\ t Find this text string ","date":"2022-04-08","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/:1:2","tags":["vim","tmux"],"title":"Vim/Neovim-Tmux 一键安装轻量级工作站","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"categories":["项目"],"content":"3.任意跳转功能，主要是和前一个功能进行补充；JumpAny 跳转到定义：cursor移动到关键词 , + j ","date":"2022-04-08","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/:1:3","tags":["vim","tmux"],"title":"Vim/Neovim-Tmux 一键安装轻量级工作站","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"categories":["项目"],"content":"4.搜索功能：LeaderF 打开搜索：, + f 结果上翻：Crtl + k 结果下翻：Crtl + j 打开：Enter 帮助：Tab ","date":"2022-04-08","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/:1:4","tags":["vim","tmux"],"title":"Vim/Neovim-Tmux 一键安装轻量级工作站","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"categories":["项目"],"content":"5.代码补全：Coc.nvim 打开搜索：在对应的关键词后面按tab会提示 结果下翻：提示后按Tab可以顺序下翻，或者用Crtl + n 结果上翻：提示后Crtl + p 选择：Enter ","date":"2022-04-08","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/:1:5","tags":["vim","tmux"],"title":"Vim/Neovim-Tmux 一键安装轻量级工作站","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"categories":["项目"],"content":"6.代码错误修正：Coc.nvim ","date":"2022-04-08","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/:1:6","tags":["vim","tmux"],"title":"Vim/Neovim-Tmux 一键安装轻量级工作站","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"categories":["项目"],"content":"7.单终端编译和写代码，不用Crtl-z切后台编译，直接借助tmux和vimux插件实现在一个界面写代码和编译 创建tmux：tmux session -t mytmux 分屏tmux：打开vim后输入, + v + p，输入相关的运行命令便可打开命令行 运行上一次的命令：需要先运行在, + v + p，然后在, + v + l便可以运行最后一次的命令 切换tmux：按Crtl + b 再按 hjkl 任意，例如向下切换则Crtl + b，然后按j，便可向下切换tmux ","date":"2022-04-08","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/:1:7","tags":["vim","tmux"],"title":"Vim/Neovim-Tmux 一键安装轻量级工作站","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"categories":["项目"],"content":"8.更加强大的终端zsh和on-my-zsh管理，支持主题和插件 ","date":"2022-04-08","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/:1:8","tags":["vim","tmux"],"title":"Vim/Neovim-Tmux 一键安装轻量级工作站","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"categories":["项目"],"content":"9.vim支持Latex保存自动编译，编译实时显示（Windows Vim Latex Live Preview） 编译latex：,lc 查看latex：,lv 删除latex相关缓存文件：,lr ","date":"2022-04-08","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/:1:9","tags":["vim","tmux"],"title":"Vim/Neovim-Tmux 一键安装轻量级工作站","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"categories":["项目"],"content":"效果预览 Vim or Neovim ","date":"2022-04-08","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/:2:0","tags":["vim","tmux"],"title":"Vim/Neovim-Tmux 一键安装轻量级工作站","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"categories":["项目"],"content":"Ubuntu安装方式 # 可在内部选择对应的版本 git clone https://github.com/SivanLaai/vimrc.git cd vimrc ./install.sh #TODO: 安装完成记得进入vim更新插件 vim-gui ","date":"2022-04-08","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/:3:0","tags":["vim","tmux"],"title":"Vim/Neovim-Tmux 一键安装轻量级工作站","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"categories":["项目"],"content":"windows 1.下载安装vim-gui gVim 下载python编译版本gvim Neovim 下载python编译版本neovim 配置路径D:\\Program Files\\Neovim\\bin为系统环境变量 2.安装对应版本的Python GVim查看对应版本的Python 查看相关版本的python下载安装： 下载Python 3.安装字体 下载字体 DejaVu Sans Mono for Powerline 4.安装universal-ctags/pygments 和 gtags （1）universal-ctags 下载universal-ctags 将ctags拷贝到安装路径，如D:\\Program Files\\ctags 配置路径D:\\Program Files\\ctags为系统环境变量 （2）pygments（主要作用是配合ctags来查找引用） pip install pygments （3）gtags 下载gtags 将gtags拷贝到安装路径，如D:\\Program Files\\gtags 配置路径D:\\Program Files\\gtags为系统环境变量 5.安装ripgrep 下载ripgrep 将ripgrep程序拷贝到安装路径，如D:\\Program Files\\ripgrep 配置路径D:\\Program Files\\ripgrep为系统环境变量 6.安装Latex 下载miktex 安装mitex并更新 7.安装Okular 下载Okular 将Okular程序安装到路径，如D:\\Program Files\\Okular 配置路径D:\\Program Files\\Okular为系统环境变量 8.安装MSYS2 下载MSYS2 将MSYS2程序安装到路径，如D:\\Program Files\\MSYS2 配置路径D:\\Program Files\\MSYS2\\usr\\bin为系统环境变量 配置路径D:\\Program Files\\MSYS2\\clang4\\bin为系统环境变量 安装clang64 # 更新软件库 pacman -Syu # 更新核心软件 pacman -Su # 安装Clang64编译环境 pacman -S --needed base-devel mingw-w64-clang-x86_64-toolchain 下载git 将git程序安装到路径，如D:\\Program Files\\git 配置路径D:\\Program Files\\git\\bin为系统环境变量 git中文显示错误修正 git config --global core.quotepath false 想卸载某个包的话 pacman -Rs mingw-w64-clang-x86_64-toolchain 9.配置vim-format依赖 #C++ 通过Clang64已经成功支持 #Python pip install --upgrade autopep8 #html\\css\\js npm install -g js-beautify 10.复制配置文件 gVim cp -rf gvim/_vimrc $vim/_vimrc cp -rf gvim/autoload vimfile - NeoVim-qt cp -rf neovim-qt/* ~/AppData/Local/nvim # Solarized Dark 主题复制 cp -rf gvim/colors vimfile 11.配置vim-gui :PlugInstall #待安装完成 ","date":"2022-04-08","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/:4:0","tags":["vim","tmux"],"title":"Vim/Neovim-Tmux 一键安装轻量级工作站","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"categories":["项目"],"content":"Xshell 护眼主题 Eyes Protection ","date":"2022-04-08","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/:5:0","tags":["vim","tmux"],"title":"Vim/Neovim-Tmux 一键安装轻量级工作站","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"categories":["项目"],"content":"安装方式 在Xshell 配色方案里导入 本项目中的xcs文件 ","date":"2022-04-08","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/:5:1","tags":["vim","tmux"],"title":"Vim/Neovim-Tmux 一键安装轻量级工作站","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"categories":["项目"],"content":"界面预览 Solarized Dark Solarized Light ","date":"2022-04-08","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/:5:2","tags":["vim","tmux"],"title":"Vim/Neovim-Tmux 一键安装轻量级工作站","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"categories":["教程"],"content":"docker教程 ","date":"2022-04-02","objectID":"/posts/technology/docker/:0:0","tags":["docker"],"title":"docker教程","uri":"/posts/technology/docker/"},{"categories":["教程"],"content":"docker安装 卸载老版本docker sudo apt-get remove docker docker-engine docker.io containerd runc 设置apt仓库 1.更新apt包索引并且安装相关依赖允许apt使用https更新 sudo apt-get update sudo apt-get install \\ ca-certificates \\ curl \\ gnupg \\ lsb-release 2.增加Docker官方GPG Key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg 3.设置apt docker稳定仓库设置 echo \\ \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list \u003e /dev/null 安装Docker引擎 1.更新apt包索引并且安装Docker引擎 sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io 2.验证docker是否成功安装 sudo docker run hello-world 3.设置apt docker稳定仓库设置 echo \\ \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list \u003e /dev/null 参考文档 Install Docker Engine on Ubuntu | Docker Documentation ","date":"2022-04-02","objectID":"/posts/technology/docker/:1:0","tags":["docker"],"title":"docker教程","uri":"/posts/technology/docker/"},{"categories":["教程"],"content":"Docker Compose安装 ","date":"2022-04-02","objectID":"/posts/technology/docker/:2:0","tags":["docker"],"title":"docker教程","uri":"/posts/technology/docker/"},{"categories":["教程"],"content":"Linux 安装Docker Compose 1.下载docker compose可执行文件 sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose 2.设置可执行权限 sudo chmod +x /usr/local/bin/docker-compose ","date":"2022-04-02","objectID":"/posts/technology/docker/:2:1","tags":["docker"],"title":"docker教程","uri":"/posts/technology/docker/"},{"categories":["教程"],"content":"qBittorrent Docker运行 ","date":"2022-04-02","objectID":"/posts/technology/docker/:3:0","tags":["docker"],"title":"docker教程","uri":"/posts/technology/docker/"},{"categories":["教程"],"content":"Docker Compose 配置qBittorrent 新建项目 1.进入home目录，新建项目qBittorrent cd ~ mkdir qBittorrent cd qBittorrent 2.进入项目文件目录，新建配置文件docker-compose.yml，配置下载端口，qBittorrent相关目录 version: \"3\" services: qbittorrent: image: emmercm/qbittorrent:latest restart: unless-stopped ports: - 8080:8080 - 5463:5463/tcp - 5463:5463/udp volumes: - ./config:/config - ./data:/data - ./downloads:/downloads - ./incomplete:/incomplete 运行项目 1.下载并创建镜像 docker-compose up 2.运行镜像 docker-compose start ","date":"2022-04-02","objectID":"/posts/technology/docker/:3:1","tags":["docker"],"title":"docker教程","uri":"/posts/technology/docker/"},{"categories":["教程"],"content":"mysql数据库 ","date":"2022-02-25","objectID":"/posts/technology/mysql/:1:0","tags":["mysql","数据库"],"title":"数据库配置","uri":"/posts/technology/mysql/"},{"categories":["教程"],"content":"mysql忘记密码 （1）修改配置文件免密 sudo vim /etc/mysql/my.cnf [mysqld] skip-grant-tables （2）重启mysql sudo service mysql restart （3）修改初始密码 mysql -u root use mysql; update user set password=password(\"test@123\") where user=\"root\"; ","date":"2022-02-25","objectID":"/posts/technology/mysql/:1:1","tags":["mysql","数据库"],"title":"数据库配置","uri":"/posts/technology/mysql/"},{"categories":["教程"],"content":"mysql root帐号不能登录 （1）修改配置文件免密 看mysql忘记密码的第一步 （2）更新ip访问权限 flush privileges; alter user 'root'@'localhost' identified by 'test@123'; flush privileges; commit; ","date":"2022-02-25","objectID":"/posts/technology/mysql/:1:2","tags":["mysql","数据库"],"title":"数据库配置","uri":"/posts/technology/mysql/"},{"categories":["教程"],"content":"mysql 创建数据库 CREATE DATABASE IF NOT EXISTS nextcloud CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci; ","date":"2022-02-25","objectID":"/posts/technology/mysql/:1:3","tags":["mysql","数据库"],"title":"数据库配置","uri":"/posts/technology/mysql/"},{"categories":["教程"],"content":"mysql 创建用户开启外网权限 打开配置文件 sudo vim /etc/mysql/my.cnf 修改绑定ip [mysqld] bind-address=0.0.0.0 具体命令 CREATE USER 'username'@'%' IDENTIFIED BY 'password'; # 所有的数据库都可以在外网访问 GRANT ALL PRIVILEGES ON *.* TO 'username'@'%'; FLUSH PRIVILEGES; ","date":"2022-02-25","objectID":"/posts/technology/mysql/:1:4","tags":["mysql","数据库"],"title":"数据库配置","uri":"/posts/technology/mysql/"},{"categories":["问题总结"],"content":"1.ModuleNotFoundError: No module named ‘_lzma’ ","date":"2021-10-05","objectID":"/posts/technology/pytorch/:1:0","tags":["pytorch"],"title":"pytorch使用问题","uri":"/posts/technology/pytorch/"},{"categories":["问题总结"],"content":"Ubuntu （1）安装依赖 apt-get install liblzma-dev -y pip install backports.lzma （2）打开lzma.py vim ~/a/b/python3.7/lzma.py （3）修改代码 #修改前 from _lzma import * from _lzma import _encode_filter_properties, _decode_filter_properties #修改后 try: from _lzma import * from _lzma import _encode_filter_properties, _decode_filter_properties except ImportError: from backports.lzma import * from backports.lzma import _encode_filter_properties, _decode_filter_properties ","date":"2021-10-05","objectID":"/posts/technology/pytorch/:1:1","tags":["pytorch"],"title":"pytorch使用问题","uri":"/posts/technology/pytorch/"},{"categories":["教程"],"content":"安装Latex ","date":"2021-10-05","objectID":"/posts/technology/latex/:1:0","tags":["latex"],"title":"安装latex","uri":"/posts/technology/latex/"},{"categories":["教程"],"content":"Windows WSL （1）安装WSL 配置WSL wsl --install 安装WSL-Ubuntu 18.04 wsl --install -d Ubuntu-18.04 #等待安装完成 启动Ubuntu wsl bash （2）安装TexLive 在线安装 sudo apt install texlive-full 装载Tex的ISO镜像安装 sudo mkdir /mnt/img sudo mount -t drvfs G: /mnt/img sudo mnt/img/install-tl （3）配置环境变量使得powershell上可以直接使用 sudo /usr/local/texlive/2020/bin/x86_64-linux/tlmgr path add （4）配置WSL使用windows字体 sudo apt install fontconfig 创建/etc/fonts/local.conf \u003c?xml version=\"1.0\"?\u003e \u003c!DOCTYPE fontconfig SYSTEM \"fonts.dtd\"\u003e \u003cfontconfig\u003e \u003cdir\u003e/mnt/c/Windows/Fonts\u003c/dir\u003e \u003c/fontconfig\u003e ","date":"2021-10-05","objectID":"/posts/technology/latex/:1:1","tags":["latex"],"title":"安装latex","uri":"/posts/technology/latex/"},{"categories":["教程"],"content":"Mongodb安装 （1）导入公匙 wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add - （2）创建mongodb列表文件 echo \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/5.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list （3）重新加载包数据 sudo apt-get update （4）重新加载包数据 sudo apt-get install -y mongodb-org=5.0.2 mongodb-org-database=5.0.2 mongodb-org-server=5.0.2 mongodb-org-shell=5.0.2 mongodb-org-mongos=5.0.2 mongodb-org-tools=5.0.2 （5）服务启动 sudo systemctl start mongod Mongodb配置修改 （1）打开配置 sudo vim /etc/mongod.conf （2）修改配置 # mongod.conf # for documentation of all options, see: # http://docs.mongodb.org/manual/reference/configuration-options/ # Where and how to store data. storage: dbPath: /var/lib/mongodb journal: enabled: true # engine: # wiredTiger: # where to write logging data. systemLog: destination: file logAppend: true path: /var/log/mongodb/mongod.log # network interfaces net: port: 10095 bindIp: 0.0.0.0 # how the process runs processManagement: timeZoneInfo: /usr/share/zoneinfo # 登录是否需要密码 #security: # authorization: enabled #operationProfiling: #replication: #sharding: ## Enterprise-Only Options: Mongodb添加用户 （1）连接Mongodb mongo mongodb://127.0.0.1:10095 （2）创建普通用户 use Production db.createUser( { user: \"production\", pwd: \"production@123\", // passwordPrompt() Or \"\u003ccleartext password\u003e\" roles: [ \"readWrite\", \"dbAdmin\" ] } ) （3）创建超级用户 use admin db.createUser( { user: \"mongoAdmin\", pwd: passwordPrompt(), // passwordPrompt() Or \"\u003ccleartext password\u003e\" roles: [ \"readWriteAnyDatabase\", \"userAdminAnyDatabase\", \"dbAdminAnyDatabase\"] } ) （4）登录 db.auth(\"production\") Mongodb更新用户权限 （1）连接Mongodb mongo mongodb://127.0.0.1:10095 （2）更新用户权限 use Production # 更新用户权限 db.updateUser(\"production\",{roles : [{\"role\" : \"readWriteAnyDatabase\",\"db\" : \"Stock\"},{\"role\" : \"dbAdminAnyDatabase\",\"db\" : \"Stock\"}]}) readWriteAnyDatabase ","date":"2021-09-16","objectID":"/posts/technology/mongodb/:0:0","tags":["MongoDB"],"title":"Mongodb总结","uri":"/posts/technology/mongodb/"},{"categories":["问题总结"],"content":"7.apt重新配置 （1）修复Python 当前的系统python如果有错误了，也需要一起修复，这个版本的python不能随便的更改，需要从一个正常的linux系统下把python复制出来。 # 版本正常的python3.6 mkdir python3.6 cd python3.6 mkdir python3.6-lib mkdir python3-lib mkdir x86_64-linux-gnu cp -rf /usr/bin/python3.6* ~/python3.6 cp -rf /usr/lib/python3.6/* ~/python3.6/python3.6-lib cp -rf /usr/lib/python3/* ~/python3.6/python3-lib cp -rf /usr/lib/x86_64-linux-gnu/*apt* ~/x86_64-linux-gnu/ cd .. tar zcvf python3.6.tar.gz python3.6 scp python3.6.tar.gz user@localhost:~ # 待修复的linux主机 tar zxvf python3.6.tar.gz cd python3.6 sudo cp -rf python3.6 /usr/bin sudo cp -rf python3.6m /usr/bin sudo cp -rf python3.6-lib/* /usr/lib/python3.6 sudo cp -rf python3-lib/* /usr/lib/python3 （2）修复动态库 dpkg -l apt 其中版本是2.0.2ubuntu0.2，下载对应的安装包并安装： # 安装apt wget http://mirrors.edge.kernel.org/ubuntu/pool/main/a/apt/apt_2.0.2ubuntu0.2_amd64.deb sudo dpkg -i apt_2.0.2ubuntu0.2_amd64.deb # 有时候提示缺少libapt-pkg6.0.so # 安装apt-pkg依赖 wget http://mirrors.edge.kernel.org/ubuntu/pool/main/a/apt/libapt-pkg6.0_2.0.2ubuntu0.2_amd64.deb sudo dpkg -i libapt-pkg6.0_2.0.2ubuntu0.2_amd64.deb （3）测试apt sudo apt update ","date":"2021-09-16","objectID":"/posts/technology/apt/:1:0","tags":["踩坑"],"title":"apt重新安装配置","uri":"/posts/technology/apt/"},{"categories":["问题总结"],"content":"Python 相关问题 ","date":"2021-09-16","objectID":"/posts/technology/python/:1:0","tags":["踩坑","python"],"title":"python总结","uri":"/posts/technology/python/"},{"categories":["问题总结"],"content":"Python ImportError: No module named _bz2 sudo apt-get install libbz2-dev #重新编译Python ","date":"2021-09-16","objectID":"/posts/technology/python/:1:1","tags":["踩坑","python"],"title":"python总结","uri":"/posts/technology/python/"},{"categories":["问题总结"],"content":"ImportError: Missing optional dependency ‘openpyxl’ pip install openpyxl #重新编译Python ","date":"2021-09-16","objectID":"/posts/technology/python/:1:2","tags":["踩坑","python"],"title":"python总结","uri":"/posts/technology/python/"},{"categories":["问题总结"],"content":"重置linux的python unset PYTHONHOME unset PYTHONPATH ","date":"2021-09-16","objectID":"/posts/technology/python/:1:3","tags":["踩坑","python"],"title":"python总结","uri":"/posts/technology/python/"},{"categories":["问题总结"],"content":"安装pip 下载get-pip.py wget https://bootstrap.pypa.io/get-pip.py 安装pip python get-pip.py ","date":"2021-09-16","objectID":"/posts/technology/python/:1:4","tags":["踩坑","python"],"title":"python总结","uri":"/posts/technology/python/"},{"categories":["教程"],"content":"Linux ","date":"2021-09-16","objectID":"/posts/technology/system/:0:0","tags":["linux","windows"],"title":"系统配置和问题","uri":"/posts/technology/system/"},{"categories":["教程"],"content":"/usr/bin/dpkg returned an error code (1) ","date":"2021-09-16","objectID":"/posts/technology/system/:1:0","tags":["linux","windows"],"title":"系统配置和问题","uri":"/posts/technology/system/"},{"categories":["教程"],"content":"解决dpkg错误 cd /var/lib/dpkg sudo mv info info.baksudo mkdir info ","date":"2021-09-16","objectID":"/posts/technology/system/:1:1","tags":["linux","windows"],"title":"系统配置和问题","uri":"/posts/technology/system/"},{"categories":["教程"],"content":"添加用户名和添加sudo ","date":"2021-09-16","objectID":"/posts/technology/system/:2:0","tags":["linux","windows"],"title":"系统配置和问题","uri":"/posts/technology/system/"},{"categories":["教程"],"content":"添加用户名 sudo useradd -m -d /data/username -s /bin/zsh username ","date":"2021-09-16","objectID":"/posts/technology/system/:2:1","tags":["linux","windows"],"title":"系统配置和问题","uri":"/posts/technology/system/"},{"categories":["教程"],"content":"修改密码 sudo passwd username ","date":"2021-09-16","objectID":"/posts/technology/system/:2:2","tags":["linux","windows"],"title":"系统配置和问题","uri":"/posts/technology/system/"},{"categories":["教程"],"content":"添加sudoers vi /etc/sudoers #添加用户 username ALL=(ALL:ALL) ALL ","date":"2021-09-16","objectID":"/posts/technology/system/:2:3","tags":["linux","windows"],"title":"系统配置和问题","uri":"/posts/technology/system/"},{"categories":["教程"],"content":"Ubuntu安装Linux开发包 sudo apt-get install build-essential ","date":"2021-09-16","objectID":"/posts/technology/system/:3:0","tags":["linux","windows"],"title":"系统配置和问题","uri":"/posts/technology/system/"},{"categories":["教程"],"content":"根据关键字把进程杀掉 kill -9 $(ps -ef|grep keyword|gawk '$0 !~/grep/ {print $2}' |tr -s '\\n' ' ') ","date":"2021-09-16","objectID":"/posts/technology/system/:4:0","tags":["linux","windows"],"title":"系统配置和问题","uri":"/posts/technology/system/"},{"categories":["教程"],"content":"linux永久挂载硬盘 查看当前的硬盘状态，可以知道硬盘的分区 sudo fdisk -l 修改配置 sudo vim /etc/fstab # 添加如下信息挂载硬盘 /dev/sdb1 /mnt/data ntfs-3g defaults 0 0 挂载硬盘 mkdir -p /mnt/data sudo mount -a ","date":"2021-09-16","objectID":"/posts/technology/system/:5:0","tags":["linux","windows"],"title":"系统配置和问题","uri":"/posts/technology/system/"},{"categories":["教程"],"content":"linux开机自启动并服务化 ","date":"2021-09-16","objectID":"/posts/technology/system/:6:0","tags":["linux","windows"],"title":"系统配置和问题","uri":"/posts/technology/system/"},{"categories":["教程"],"content":"Ubuntu 开机启动 系统服务化（以qbittorrent服务化为例） 不要在后面添加#的注释，不然会导致未知错误 配置文件/lib/systemd/system/qbittorrent.service [Unit] Description=qbittorrent-nox service #服务描述 Documentation=man:qbittorrent-nox(1) [Service] User=username #用户 Group=usergroup #用户组 UMask=0000 #权限777 Type=simple #ExecStartPre=-cd /home/\u003cspan class=\"hljs-built_in\"\u003etest\u003c/span\u003e/ #启动前执行 #WorkingDirectory=/home/\u003cspan class=\"hljs-built_in\"\u003etest\u003c/span\u003e/ #工作目录 ExecStart=/usr/bin/qbittorrent-nox #启动时执行 ExecReload=/bin/kill -SIGHUP $MAINPID #重启时执行 ExecStop=/bin/kill -SIGINT $MAINPID #停止时执行 [Install] WantedBy=default.target 服务常用命令集合 # 开机启动 systemctl enable qbittorrent # 关闭开机启动 systemctl disable qbittorrent # 启动服务 systemctl start qbittorrent # 停止服务 systemctl stop qbittorrent # 重启服务 systemctl restart qbittorrent # 查看服务状态 systemctl status qbittorrent systemctl is-active sshd.service # 结束服务进程(服务无法停止时) systemctl kill qbittorrent 用户服务化（以v2ray服务化为例，不需要sudo也可以启动，在某个用户登录的时候启动） 不要在后面添加#的注释，不然会导致未知错误 配置文件~/.config/systemd/user/v2ray.service``` [Unit] Description=keep v2ray's servie alive [Service] Type=simple Restart=always WorkingDirectory=~/v2ray/ ExecStart=bash v2ray.sh SystemCallArchitectures=native MemoryDenyWriteExecute=true NoNewPrivileges=true [Install] WantedBy=default.target 启动服务在原来的基础上加--user ```bash # 开机启动 systemctl --user enable --now v2ray # 关闭开机启动 systemctl --user disable --now v2ray ","date":"2021-09-16","objectID":"/posts/technology/system/:6:1","tags":["linux","windows"],"title":"系统配置和问题","uri":"/posts/technology/system/"},{"categories":["教程"],"content":"linux安装常见中文字体 ","date":"2021-09-16","objectID":"/posts/technology/system/:7:0","tags":["linux","windows"],"title":"系统配置和问题","uri":"/posts/technology/system/"},{"categories":["教程"],"content":"Ubuntu 打包Windows字体 mkdir -p winfonts cp -rf C:/Windows/Fonts winfonts 压缩winfonts为winfonts.zip 上传到linux scp winfonts.zip username@host:~ 安装字体 unzip -n -d /usr/share/fonts winfonts.zip sudo mkfontscale sudo mkfontdir sudo fc-cache -f -v 检查中文字体 fc-list :lang=zh Windows ","date":"2021-09-16","objectID":"/posts/technology/system/:7:1","tags":["linux","windows"],"title":"系统配置和问题","uri":"/posts/technology/system/"},{"categories":["教程"],"content":"给Neovim添加右键文件夹、文件以及右键空白区域三种菜单 右键文件夹 添加如下值 计算机\\HKEY_CLASSES_ROOT\\Directory\\shell\\使用Neovim打开 添加Icon 在使用Neovim打开空白处添加字符串项Icon设置值为\"D:\\Program Files\\Neovim\\bin\\gnvim.exe\" 添加打开命令 在使用Neovim打开添加子项command，设置值为\"D:\\Program Files\\Neovim\\bin\\gnvim.exe\" -qwindowgeometry 1310x650+20+20 \"%1\" 右键文件 添加如下值 计算机\\HKEY_CLASSES_ROOT\\*\\shell\\使用Neovim打开 添加Icon 在使用Neovim打开空白处添加字符串项Icon设置值为\"D:\\Program Files\\Neovim\\bin\\gnvim.exe\" 添加打开命令 在使用Neovim打开添加子项command，设置值为\"D:\\Program Files\\Neovim\\bin\\gnvim.exe\" -qwindowgeometry 1310x650+20+20 \"%1\" 右键文件 添加如下值 计算机\\HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\使用Neovim打开 添加Icon 在使用Neovim打开空白处添加字符串项Icon设置值为\"D:\\Program Files\\Neovim\\bin\\gnvim.exe\" 添加打开命令 在使用Neovim打开添加子项command，设置值为\"D:\\Program Files\\Neovim\\bin\\gnvim.exe\" 参考文档 使用注册表编辑win10鼠标右键菜单，详细解释（右键文件夹、文件以及右键空白区域下三种情况）_鸾镜朱颜暗换的博客-CSDN博客_桌面右键菜单注册表 contextmenu - How add context menu item to Windows Explorer for folders - Stack Overflow ","date":"2021-09-16","objectID":"/posts/technology/system/:8:0","tags":["linux","windows"],"title":"系统配置和问题","uri":"/posts/technology/system/"},{"categories":["教程"],"content":"Ubuntu UFW 配置 （1）查看ufw信息 sudo ufw status （2）激活ufw sudo ufw enable （3）阻止/允许IP # 允许IP sudo ufw allow from 203.0.113.101 # 阻止IP sudo ufw deny from 203.0.113.100 （3）阻止/允许port # 允许外部访问端口8080 sudo ufw allow 8080 # 允许某ip访问端口8080 sudo ufw allow from 203.0.113.101 to any port 8080 # 阻止外部访问端口8080 sudo ufw disable 8080 # 阻止某ip访问端口8080 sudo ufw deny from 203.0.113.101 to any port 8080 （4）阻止/允许ssh # 允许 sudo ufw allow OpenSSH # 阻止 sudo ufw disable OpenSSH （5）查看支持的APP，并阻止/允许 sudo ufw app list | grep Nginx #Output Nginx Full Nginx HTTP Nginx HTTPS 删除NginxFull #允许 sudo ufw allow \"Nginx Full\" #阻止 sudo ufw deny \"Nginx Full\" （6）删除规则 先查看规则 sudo ufw status 选择对应的规则删除，例如第二个规则 sudo ufw delete 2 直接根据规则来删除 sudo ufw allow from 203.0.113.101 to any port 8080 sudo ufw delete allow from 203.0.113.101 to any port 8080 ","date":"2021-08-30","objectID":"/posts/technology/ufw_config/:0:1","tags":["ufw","firewall"],"title":"配置ufw","uri":"/posts/technology/ufw_config/"},{"categories":null,"content":"\u003cdiv id=\"mySidepanel\" class=\"sidepanel\"\u003e \u003ca href=\"javascript:void(0)\" class=\"closebtn\" onclick=\"closeNav()\"\u003e×\u003c/a\u003e \u003ca href=\"#\" onclick=\"loadPage('https://g.deembear.top/chat/share?shareId=ad2as8uxm0gq00i7ue0uevoq')\"\u003e翻译助手\u003c/a\u003e \u003ca href=\"#\" onclick=\"loadPage('https://g.deembear.top/chat/share?shareId=imh3c4ldf1enzts9syiz5xn0')\"\u003e读后感助手\u003c/a\u003e \u003ca href=\"#\" onclick=\"loadPage('https://g.deembear.top/chat/share?shareId=62q2vq3tuhtooc8kj4bba5dl')\"\u003eAI医生\u003c/a\u003e \u003ca href=\"#\" onclick=\"loadPage('https://g.deembear.top/chat/share?shareId=hyfkggp6gu5rtt70xvefocka')\"\u003e提示工程师\u003c/a\u003e \u003ca href=\"#\" onclick=\"loadPage('https://g.deembear.top/chat/share?shareId=9t49xevbgv864bol4eo1hkap')\"\u003e高级软件工程师\u003c/a\u003e \u003cdiv class=\"dropdown\"\u003e \u003cbutton class=\"dropbtn\"\u003e☰\u003c/button\u003e \u003cdiv class=\"dropdown-content\"\u003e \u003ca href=\"#\" onclick=\"loadPage('https://magic-frp.ninomae.cn')\"\u003e首页\u003c/a\u003e \u003ca href=\"#\" onclick=\"loadPage('https://s.deembear.top')\"\u003e指令\u003c/a\u003e \u003ca href=\"#\" onclick=\"loadPage('https://a.deembear.top')\"\u003e学术GPT\u003c/a\u003e \u003ca href=\"#\" onclick=\"loadPage('https://b.deembear.top')\"\u003eTTSChat\u003c/a\u003e \u003ca href=\"#\" onclick=\"loadPage('https://c.deembear.top')\"\u003eChatGPT\u003c/a\u003e \u003ca href=\"#\" onclick=\"loadPage('https://d.deembear.top')\"\u003eLobeChat\u003c/a\u003e \u003ca href=\"#\" onclick=\"loadPage('https://e.deembear.top')\"\u003eNextChat\u003c/a\u003e \u003ca href=\"#\" onclick=\"loadPage('https://f.deembear.top')\"\u003eFlowDeer\u003c/a\u003e \u003ca href=\"#\" onclick=\"loadPage('https://img.deembear.top')\"\u003eGPTIMG\u003c/a\u003e \u003ca href=\"#\" onclick=\"loadPage('https://code.deembear.top')\"\u003eChatCode\u003c/a\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003cbutton class=\"openbtn\" onclick=\"openNav()\"\u003e☰\u003c/button\u003e \u003c/div\u003e \u003cdiv id=\"main\"\u003e \u003ciframe id=\"contentFrame\" style=\"width:100%;height:100%\"\u003e\u003c/iframe\u003e \u003c/div\u003e \u003cscript src=\"script.js\"\u003e\u003c/script\u003e ","date":"2021-07-29","objectID":"/chatgpt/:0:0","tags":null,"title":"ChatGPT","uri":"/chatgpt/"},{"categories":null,"content":"📚Blog Hi，你好这是我的个人网站。 ","date":"2021-07-29","objectID":"/about/:1:0","tags":null,"title":"关于","uri":"/about/"},{"categories":["技术"],"content":"中转：速度不重要，隐蔽性、抗干扰性第一。 ","date":"2020-01-12","objectID":"/posts/technology/lattern/:0:0","tags":["V2Ray"],"title":"搭建备用梯子：V2Ray + WebSocket + TLS + CloudFlare","uri":"/posts/technology/lattern/"},{"categories":["技术"],"content":"1. 安装 V2Ray 安装方法有很多，这里就直接用官方提供的脚本： bash \u003c(curl -L -s https://install.direct/go.sh) 脚本会自动安装这些东西： /usr/bin/v2ray/v2ray V2Ray 程序 /usr/bin/v2ray/v2ctl V2Ray 工具 /etc/v2ray/config.json 配置文件 /usr/bin/v2ray/geoip.dat IP 数据文件 /usr/bin/v2ray/geosite.dat 域名数据文件 /etc/systemd/system/v2ray.service Systemd Service /etc/init.d/v2ray SysV 启动脚本 ","date":"2020-01-12","objectID":"/posts/technology/lattern/:1:0","tags":["V2Ray"],"title":"搭建备用梯子：V2Ray + WebSocket + TLS + CloudFlare","uri":"/posts/technology/lattern/"},{"categories":["技术"],"content":"2. 配置 V2Ray 服务端 虽然严格来说 V2Ray 并不分客户端和服务端……反正就是那个意思啦。 编辑配置文件 /etc/v2ray/config.json： { \"inbounds\": [{ \"port\": 10086, // 因为还要用 Nginx 反代，这里直接监听本地就行 \"listen\": \"127.0.0.1\", \"protocol\": \"vmess\", \"settings\": { \"clients\": [ { // 用户 UUID，自己随机弄一个 \"id\": \"23ad6b10-8d1a-40f7-8ad0-e3e35cd38297\", \"level\": 1, \"alterId\": 64 } ] }, \"streamSettings\": { // 指定底层传输方式为 WebSocket \"network\": \"ws\", \"wsSettings\": { // 在哪个路径上提供 WS 服务，可自定义 \"path\": \"/whatever\" } } }], \"outbounds\": [{ \"protocol\": \"freedom\", \"settings\": {} },{ \"protocol\": \"blackhole\", \"settings\": {}, \"tag\": \"blocked\" }], \"routing\": { \"rules\": [ { // 默认规则，禁止访问服务器内网 \"type\": \"field\", \"ip\": [\"geoip:private\"], \"outboundTag\": \"blocked\" } ] } } 上述配置是直接基于默认配置修改的，V2Ray 的配置很灵活，还有很多可以完善的地方。不过配置调优并不是本文的重点，所以这里按下不表，有兴趣可以自行阅读官方文档。 ","date":"2020-01-12","objectID":"/posts/technology/lattern/:2:0","tags":["V2Ray"],"title":"搭建备用梯子：V2Ray + WebSocket + TLS + CloudFlare","uri":"/posts/technology/lattern/"},{"categories":["技术"],"content":"3. 运行 V2Ray 配置完了，运行一下： systemctl start v2ray 如果你的服务器不用 Systemd： service v2ray start # 要么 /etc/init.d/v2ray start # 或者手动运行 /usr/bin/v2ray/v2ray -config /etc/v2ray/config.json 测试一下有没有跑起来： curl -i http://127.0.0.1:10086/whatever HTTP/1.1 400 Bad Request Content-Type: text/plain; charset=utf-8 Sec-Websocket-Version: 13 X-Content-Type-Options: nosniff Date: Sun, 12 Jan 2020 11:45:14 GMT Content-Length: 12 Bad Request 注意 curl 访问的端口和路径要和上面 V2Ray 中配置的一致，出现 400 Bad Request 就对了。 ","date":"2020-01-12","objectID":"/posts/technology/lattern/:3:0","tags":["V2Ray"],"title":"搭建备用梯子：V2Ray + WebSocket + TLS + CloudFlare","uri":"/posts/technology/lattern/"},{"categories":["技术"],"content":"4. 配置 Nginx 毕竟要隐蔽嘛，最好是选一个已经上线的正常网站，悄咪咪地把其中一个路径反代到我们的 V2Ray 上。 网上不少 V2Ray + WebSocket + TLS 的教程里，Web 服务器 + SSL 证书的配置都是重头戏。可如果你平时就有在捣鼓网站的话，这些实在是都不算啥……所以我这里也就一笔带过了。 以 Nginx 为例，找个合适的 server {} 块添加以下内容（这重定向语法够蛋疼的）： location /whatever { proxy_redirect off; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; set $is_v2ray 0; if ($http_upgrade = \"websocket\") { set $is_v2ray 1; } if ($is_v2ray = 1) { # 仅当请求为 WebSocket 时才反代到 V2Ray proxy_pass http://127.0.0.1:10086; } if ($is_v2ray = 0) { # 否则显示正常网页 rewrite ^/(.*)$ /mask-page last; } } 注意 location 的路径要和上面 V2Ray 里配置的一样。 最后完整的 Nginx 配置大概类似这样： server { listen 443 ssl http2; server_name example.com; index index.html index.htm index.php; root /data/wwwroot/example; ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; ssl_session_cache shared:SSL:10m; ssl_session_timeout 10m; ssl_protocols TLSv1.2 TLSv1.3; ssl_prefer_server_ciphers on; ssl_ciphers EECDH+AESGCM:EDH+AESGCM; location ~ [^/]\\.php(/|$) { fastcgi_pass unix:/dev/shm/php-cgi.sock; fastcgi_index index.php; include fastcgi.conf; } location /whatever { # ... } } 表面看上去像个正常 PHP 网站，/whatever 里才是大有乾坤。 再把路径和网站内容搞得唬人一点，我寻思隐蔽性方面应该是没问题的。 ","date":"2020-01-12","objectID":"/posts/technology/lattern/:4:0","tags":["V2Ray"],"title":"搭建备用梯子：V2Ray + WebSocket + TLS + CloudFlare","uri":"/posts/technology/lattern/"},{"categories":["技术"],"content":"5. 配置 CloudFlare 呃，这个就不用讲什么了吧。还不说声多谢 CloudFlare 哥？ CDN 配置完了再用 curl 测试一下： curl -i https://example.com/whatever HTTP/2 400 date: Sun, 12 Jan 2020 08:44:07 GMT content-type: text/plain; charset=utf-8 content-length: 12 sec-websocket-version: 13 x-content-type-options: nosniff cf-cache-status: DYNAMIC expect-ct: max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\" server: cloudflare Bad Request 同样也是出现 400 Bad Request 就对了。 如果你像我上面一样在 Nginx 中配置了 $http_upgrade = \"websocket\" 的判断的话，这里返回的会是用于伪装的那个页面（而且 Nginx 的 $http_upgrade 变量不知道是按什么赋值的，直接 curl --header \"Upgrade: websocket\" 的话还不认，怪得很）。可以使用 wscat 来测试： wscat -c wss://example.com/whatever Connected (press CTRL+C to quit) ","date":"2020-01-12","objectID":"/posts/technology/lattern/:5:0","tags":["V2Ray"],"title":"搭建备用梯子：V2Ray + WebSocket + TLS + CloudFlare","uri":"/posts/technology/lattern/"},{"categories":["技术"],"content":"6. 配置 V2Ray 客户端 客户端配置文件大概改成这样： { \"log\": { \"loglevel\": \"warning\" }, \"inbounds\": [{ // 本地代理配置 \"port\": 1080, \"listen\": \"127.0.0.1\", \"protocol\": \"socks\", \"settings\": { \"auth\": \"noauth\", \"udp\": false, \"ip\": \"127.0.0.1\" } }], \"outbounds\": [{ \"protocol\": \"vmess\", \"settings\": { \"vnext\": [ { // 套过 CloudFlare 的网址 \"address\": \"example.com\", \"port\": 443, \"users\": [ { // id 和 alterId 必须和服务端上配置的一样 \"id\": \"23ad6b10-8d1a-40f7-8ad0-e3e35cd38297\", \"alterId\": 64 } ] } ] }, \"streamSettings\": { // 传输协议为 WebSocket \"network\": \"ws\", // 底层传输安全为 TLS \"security\": \"tls\", \"wsSettings\": { // 路径要和上面设置的一样 \"path\": \"/whatever\" } } }], \"policy\": { \"levels\": { \"0\": {\"uplinkOnly\": 0} } } } 上述客户端配置同样也是简化的，路由、DNS 什么的都没设置。 当然，我估计桌面用户基本上用的都是各种图形客户端，不然可不是折腾自己嘛。以 Windows 上的 v2rayN 客户端为例，你可以这样添加服务器： 不出意外就可以正常使用了。 ","date":"2020-01-12","objectID":"/posts/technology/lattern/:6:0","tags":["V2Ray"],"title":"搭建备用梯子：V2Ray + WebSocket + TLS + CloudFlare","uri":"/posts/technology/lattern/"},{"categories":["技术"],"content":"常见问题 ","date":"2020-01-12","objectID":"/posts/technology/lattern/:7:0","tags":["V2Ray"],"title":"搭建备用梯子：V2Ray + WebSocket + TLS + CloudFlare","uri":"/posts/technology/lattern/"},{"categories":["技术"],"content":"TUN模式，开启热点连接暴增 开启热点分享功能，此时系统网络设置中会生成一个网卡 开启 TUN 模式 进入系统网络设置，在 Clash 网卡右键选择属性，选择共享标签页 勾选“允许其他网络用户通过此计算机的 Internet 连接来连接” 在“家庭网络连接”选择框中选择第 1 步生成的网卡 networdk-adaptor.jpg 参考链接： WebSocket+TLS+Web · V2Ray 配置指南|V2Ray 白话文教程 配置文件 · Project V 官方网站 使用Cloudflare中转V2Ray流量 · 233boy/v2ray Wiki CFW TUN 模式 移动热点冲突 - Leey’s ","date":"2020-01-12","objectID":"/posts/technology/lattern/:7:1","tags":["V2Ray"],"title":"搭建备用梯子：V2Ray + WebSocket + TLS + CloudFlare","uri":"/posts/technology/lattern/"},{"categories":null,"content":"FixIt 主题的离线缓存页面","date":"0001-01-01","objectID":"/offline/","tags":null,"title":"","uri":"/offline/"}]